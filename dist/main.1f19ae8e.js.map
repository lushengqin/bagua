{"version":3,"sources":["main.js"],"names":["demo","document","querySelector","style","string","n","string2","step","setTimeout","innerHTML","substring","window","scrollTo","length"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAX;AACA,IAAIC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;AACA,IAAIE,MAAM,gkCAAV,EAgCA;AACA;;AACA,IAAIC,CAAC,GAAG,CAAR;AACA,IAAIC,OAAO,GAAG,EAAd,EAAkB;AAElB;AAGA;;AACA,IAAIC,IAAI,GAAG,SAAPA,IAAO,GAAI;AACXC,EAAAA,UAAU,CAAC,YAAM;AACb,QAAGJ,MAAM,CAACC,CAAD,CAAN,KAAY,IAAf,EAAoB;AAChB;AACA;AACAC,MAAAA,OAAO,IAAI,MAAX;AACH,KAJD,MAIM,IAAGF,MAAM,CAACC,CAAD,CAAN,KAAc,GAAjB,EAAsB;AACxBC,MAAAA,OAAO,IAAI,QAAX,CADwB,CAGxB;AACH,KAJK,MAID;AACD;AACAA,MAAAA,OAAO,GAAGA,OAAO,GAACF,MAAM,CAACC,CAAD,CAAxB;AACH,KAZY,CAab;AAEA;;;AACAL,IAAAA,IAAI,CAACS,SAAL,GAAiBH,OAAjB;AACAH,IAAAA,KAAK,CAACM,SAAN,GAAkBL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAmBL,CAAnB,CAAlB;AACAM,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAkB,KAAlB;AACAZ,IAAAA,IAAI,CAACY,QAAL,CAAc,CAAd,EAAgB,KAAhB,EAnBa,CAoBb;;AAEA,QAAGP,CAAC,GAACD,MAAM,CAACS,MAAP,GAAc,CAAnB,EAAqB;AACjBR,MAAAA,CAAC,GAACA,CAAC,GAAC,CAAJ;AACAE,MAAAA,IAAI;AACP;AAEJ,GA3BS,EA2BP,EA3BO,CAAV;AA4BH,CA7BD;;AA8BAA,IAAI,IAGJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["let demo = document.querySelector('#demo')\r\nlet style = document.querySelector('#style')\r\nlet string = `/*\r\n你好,接下来我要展示的是一个动画八卦图!\r\n具体请代码往下看\r\n*/\r\n\r\n/*先画一个正方形*/\r\n.Diagrams{\r\n    border:1px solid #eee;\r\n    border-radius: 50%;\r\n    background: linear-gradient(90deg,rgba(255,255,255,1) 50%, rgba(255,255,255,1)  50%,  rgba(0,0,0,1) 0%, rgba(0,0,0,1) 100%);\r\n}\r\n\r\n/*再画两个圆*/\r\n\r\n/*第一个圆开始*/\r\n.Diagrams::before{\r\n    top:0;\r\n    transform:translateX(-50%);\r\n    background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%);\r\n}\r\n/*第一个圆结束*/\r\n\r\n/*第二个圆开始*/\r\n.Diagrams::after{\r\n    bottom:0;\r\n    transform:translateX(-50%);\r\n    background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n/*第二个圆结束*/\r\n\r\n/*好了,八卦图完成了*/\r\n`\r\n// string = string.replace('\\n', '<br/>') // 只能改变第一个回车换行 所以我们选用第二种办法正则\r\n// string=string.replace(/\\n/g,'<br/>')\r\nlet n = 0\r\nlet string2 = ''  //页面渲染的string2  处理过的直接用string会出现<\r\n\r\n// demo.innerHTML = string.substring(0,n)\r\n\r\n\r\n//封装函数\r\nlet step = ()=>{\r\n    setTimeout(() => {\r\n        if(string[n]==='\\n'){\r\n            // string2 = string2+\"<br/>\"\r\n            // 如果它的值是回车 那么就加一个换行  怎么查看是不是<br>或者回车  用string.charCodeAt() //得到的结果是10 \r\n            string2 += '<br>'\r\n        }else if(string[n] === ' ' ){\r\n            string2 += '&nbsp;'\r\n            \r\n            // console.log(string[n])\r\n        }else{\r\n            // 如果它的值不是加车 那么就加string[n]的下一个\r\n            string2 = string2+string[n]\r\n        }\r\n        // console.log(string[n])\r\n       \r\n        // string2 = string2+string[n]\r\n        demo.innerHTML = string2\r\n        style.innerHTML = string.substring(0,n)\r\n        window.scrollTo(0,99999)\r\n        demo.scrollTo(0,99999)\r\n        // demo.innerHTML = string.substring(0,n) //不知道取值n  因为循环一个一个出来的 所以取n 可以实现动画效果 之前自己试一直取string.length 一下子就出来了 是因为写死了\r\n        \r\n        if(n<string.length-1){\r\n            n=n+1\r\n            step()\r\n        }\r\n        \r\n    }, 10);\r\n}\r\nstep()\r\n\r\n\r\n// setTimeout(() => {\r\n//     style.innerHTML=`body{\r\n//         color:red;\r\n//     }`\r\n// }, 1000);\r\n\r\n// setTimeout(() => {\r\n//     step()\r\n// }, 1000);\r\n\r\n\r\n// setInterval(() => {\r\n//     n=n+1\r\n//     demo.innerHTML= n\r\n// }, 1000);"]}